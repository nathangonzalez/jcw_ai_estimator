name: Bootstrap scaffold
permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create scaffold files
        run: |
          set -euo pipefail

          ROOT=$(pwd)
          echo "Creating scaffold in $ROOT"

          mkdir -p services/api/app services/plan-ai/app services/bim/app services/gis/app services/web/pages infra/traefik scripts .github/workflows

          # README
          cat > README.md <<'EOF'
          # Coastal BIM AI (scaffold inside jcw_ai_estimator)

          Monorepo: AI plan reading → BIM/QTO → estimating, with Florida coastal risk overlays.

          Quick start:
          1) Install Docker & Docker Compose.
          2) Copy `.env.example` to `.env` and adjust secrets.
          3) `docker compose -f infra/docker-compose.yml up --build`
          4) Web UI: http://localhost:3000  | API: http://localhost:8000/docs
          EOF

          # .env.example
          cat > .env.example <<'EOF'
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=coastal
          MINIO_ROOT_USER=minio
          MINIO_ROOT_PASSWORD=minio123
          S3_ENDPOINT=http://obj:9000
          S3_BUCKET=plans
          S3_REGION=us-east-1
          JWT_SECRET=change_me
          EOF

          # .gitignore
          cat > .gitignore <<'EOF'
          # Python
          __pycache__/
          *.pyc
          .venv/
          .env

          # Node
          node_modules/
          .next/
          dist/

          # Data
          backend/data/*
          !backend/data/.gitkeep
          models/*
          !backend/models/.gitkeep

          # OS
          .DS_Store
          EOF

          # services/api
          cat > services/api/app/main.py <<'PY'
          from fastapi import FastAPI
          from fastapi.middleware.cors import CORSMiddleware

          app = FastAPI(title="Coastal BIM AI API")

          app.add_middleware(
              CORSMiddleware,
              allow_origins=["*"], allow_credentials=True,
              allow_methods=["*"], allow_headers=["*"],
          )

          @app.get("/health")
          def health(): return {"ok": True}

          @app.post("/ingest")
          def ingest_stub(): return {"msg": "upload to S3; enqueue plan-ai job"}

          @app.get("/qto/{project_id}")
          def qto_stub(project_id: str): return {"project_id": project_id, "lines": []}

          @app.get("/site/florida")
          def fl_site_stub():
              return {"nfhl": "use WMS/FeatureServer", "cccl": "DEP GIS", "slr": "NOAA SLR"}
          PY

          cat > services/api/requirements.txt <<'REQ'
          fastapi==0.115.0
          uvicorn[standard]==0.30.6
          boto3==1.35.0
          redis==5.0.7
          httpx==0.27.2
          pydantic==2.8.2
          REQ

          cat > services/api/Dockerfile <<'DF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          COPY app app
          EXPOSE 8000
          CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]
          DF

          # services/plan-ai (placeholder)
          cat > services/plan-ai/app/worker.py <<'PY'
          # Minimal placeholder: wire up LayoutParser/Tesseract later.
          from fastapi import FastAPI
          app = FastAPI(title="Plan-AI Service")

          @app.get("/health")
          def health(): return {"ok": True}
          PY

          cat > services/plan-ai/requirements.txt <<'REQ'
          fastapi==0.115.0
          uvicorn[standard]==0.30.6
          layoutparser==0.3.4
          pytesseract==0.3.13
          opencv-python-headless==4.10.0.84
          pdf2image==1.17.0
          Pillow==10.4.0
          numpy==2.1.1
          REQ

          cat > services/plan-ai/Dockerfile <<'DF'
          FROM python:3.11-slim
          RUN apt-get update && apt-get install -y tesseract-ocr poppler-utils && rm -rf /var/lib/apt/lists/*
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          COPY app app
          EXPOSE 8010
          CMD ["uvicorn", "app.worker:app", "--host", "0.0.0.0", "--port", "8010"]
          DF

          # BIM placeholder
          cat > services/bim/app/main.py <<'PY'
          from fastapi import FastAPI
          app = FastAPI(title="BIM/QTO Service")

          @app.get("/health")
          def health(): return {"ok": True}
          PY

          cat > services/bim/requirements.txt <<'REQ'
          fastapi==0.115.0
          uvicorn[standard]==0.30.6
          # ifcopenshell pinned later as needed
          REQ

          cat > services/bim/Dockerfile <<'DF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt || true
          COPY app app
          EXPOSE 8020
          CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8020"]
          DF

          # GIS placeholder
          cat > services/gis/app/main.py <<'PY'
          from fastapi import FastAPI
          import httpx
          app = FastAPI(title="GIS Service (FL Coastal)")

          @app.get("/health")
          def health(): return {"ok": True}
          PY

          cat > services/gis/requirements.txt <<'REQ'
          fastapi==0.115.0
          uvicorn[standard]==0.30.6
          httpx==0.27.2
          shapely==2.0.6
          pyproj==3.6.1
          REQ

          cat > services/gis/Dockerfile <<'DF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          COPY app app
          EXPOSE 8030
          CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8030"]
          DF

          # Web minimal
          cat > services/web/package.json <<'JSON'
          {
            "name": "coastal-web",
            "private": true,
            "scripts": {
              "dev": "next dev -p 3000",
              "build": "next build",
              "start": "next start -p 3000"
            },
            "dependencies": {
              "next": "14.2.5",
              "react": "18.3.1",
              "react-dom": "18.3.1"
            }
          }
          JSON

          cat > services/web/pages/index.js <<'JS'
          export default function Home() {
            return (
              <main style={{padding:20}}>
                <h1>Coastal BIM AI</h1>
                <p>Welcome. API at <code>http://localhost:8000/docs</code></p>
              </main>
            );
          }
          JS

          cat > services/web/Dockerfile <<'DF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package.json .
          RUN npm install
          COPY pages pages
          EXPOSE 3000
          CMD ["npm", "run", "dev"]
          DF

          # infra: traefik + compose
          cat > infra/traefik/traefik.yml <<'TF'
          entryPoints:
            web:
              address: ":80"
          providers:
            docker: {}
          api:
            dashboard: true
          TF

          cat > infra/docker-compose.yml <<'DC'
          version: "3.9"
          services:
            db:
              image: postgis/postgis:16-3.4
              environment:
                POSTGRES_USER: ${POSTGRES_USER:-postgres}
                POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
                POSTGRES_DB: ${POSTGRES_DB:-coastal}
              ports: ["5432:5432"]

            obj:
              image: minio/minio:RELEASE.2024-07-26T20-05-44Z
              command: server /data --console-address ":9001"
              environment:
                MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
                MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
              ports: ["9000:9000","9001:9001"]
              volumes: ["minio_data:/data"]

            cache:
              image: redis:7-alpine
              ports: ["6379:6379"]

            api:
              build: ../services/api
              environment:
                S3_ENDPOINT: ${S3_ENDPOINT:-http://obj:9000}
              ports: ["8000:8000"]
              depends_on: [db, obj, cache]

            web:
              build: ../services/web
              ports: ["3000:3000"]
              depends_on: [api]

          volumes:
            minio_data:
          DC

          # scripts
          cat > scripts/minio_make_bucket.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          MC_IMAGE=minio/mc
          S3_URL=${S3_ENDPOINT:-http://localhost:9000}
          USER=${MINIO_ROOT_USER:-minio}
          PASS=${MINIO_ROOT_PASSWORD:-minio123}
          BUCKET=${S3_BUCKET:-plans}
          docker run --rm --network host ${MC_IMAGE} alias set local ${S3_URL} ${USER} ${PASS} || true
          docker run --rm --network host ${MC_IMAGE} mb -p local/${BUCKET} || true
          echo "Bucket '${BUCKET}' ensured at ${S3_URL}"
          SH
          chmod +x scripts/minio_make_bucket.sh

          # minimal ci workflow
          cat > .github/workflows/ci.yml <<'CI'
          name: ci
          on: [push, pull_request]
          jobs:
            build:
              runs-on: ubuntu-latest
              steps:
              - uses: actions/checkout@v4
              - name: Build API
                run: docker build -t api ./services/api || true
              - name: Build Web
                run: docker build -t web ./services/web || true
          CI

          # add, commit, push changes
          git config user.name "github-actions[bot]" >/dev/null 2>&1 || true
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" >/dev/null 2>&1 || true
          git add -A
          if git commit -m "scaffold: add coastal-bim-ai scaffold" ; then
            git push
            echo "Scaffold committed and pushed."
          else
            echo "No changes to commit."
          fi

      - name: Done
        run: echo "Bootstrap finished. Inspect repo root for scaffold files."
